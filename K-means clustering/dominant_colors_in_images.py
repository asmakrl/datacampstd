# -*- coding: utf-8 -*-
"""Dominant Colors in Images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RmngMxKJkrHUrMuWEFEkWYonkd1eg6Kd

You can find the article here: https://www.datainsightonline.com/post/machine-learning-concepts-k-means-clustering
"""

# Import the kmeans and vq functions
from scipy.cluster.vq import kmeans, vq, whiten
import matplotlib.image as img
import matplotlib.pyplot as plt 
import seaborn as sns
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

image = img.imread('/content/drive/MyDrive/Data science project/red.png')
print(image.shape)

r = []
g = []
b = []
for row in image:
    for temp_r, temp_g, temp_b, temp in row:
        r.append(temp_r)
        g.append(temp_g)
        b.append(temp_b)

pixels = pd.DataFrame({'red':r,
                       'blue': b,
                       'green':g})
pixels.head()

# Scale wage and value
pixels['scaled_red'] = whiten(pixels['red'])
pixels['scaled_blue'] = whiten(pixels['blue'])
pixels['scaled_green'] = whiten(pixels['green'])
pixels.head()

distortions = []
num_clusters = range(1, 7)

# Create a list of distortions from the kmeans function
for i in num_clusters:
    cluster_centers, distortion = kmeans(pixels[['scaled_red','scaled_blue','scaled_green']],i)
    distortions.append(distortion)
    
# Create a DataFrame with two lists - num_clusters, distortions
elbow_plot = pd.DataFrame({'num_clusters': num_clusters, 'distortions': distortions})

# Creat a line plot of num_clusters and distortions
sns.lineplot(x='num_clusters', y='distortions', data = elbow_plot)
plt.xticks(num_clusters)
plt.show()

cluster_centers, _ = kmeans(pixels[['scaled_red','scaled_blue','scaled_green']],3)

colors = []

# Get standard deviations of each color
r_std,g_std,b_std = pixels[['red', 'green', 'blue']].std()

for cluster_center in cluster_centers:
    red_scaled, green_scaled, blue_scaled = cluster_center
 
    # Convert each standardized value to scaled value
    colors.append((
    red_scaled * r_std, 
    green_scaled * g_std, 
    blue_scaled * b_std 
    ))

# Display colors of cluster centers
plt.imshow([colors])
plt.show()